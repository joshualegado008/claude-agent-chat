services:
  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    container_name: chorus-postgres-local
    environment:
      POSTGRES_DB: agent_conversations
      POSTGRES_USER: agent_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-agent_pass_secure}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./metadata_schema.sql:/docker-entrypoint-initdb.d/02-metadata.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agent_user -d agent_conversations"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Qdrant vector database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: chorus-qdrant-local
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334
    restart: unless-stopped

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: web/backend/Dockerfile
    container_name: chorus-backend-local
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agent_conversations
      - POSTGRES_USER=agent_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-agent_pass_secure}
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Next.js Frontend
  frontend:
    build:
      context: web/frontend
      dockerfile: Dockerfile
    container_name: chorus-frontend-local
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
